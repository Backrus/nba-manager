# data from "A Markov Model for Basketball" by Kenny Shirley

import numpy as np
import random
from numpy.random import choice

model = np.array([
    [0.14,0,0,0,0,0.06,0,0,0,0,0,0.11,0,0.01,0,0.1,0,0.21,0.05,0.1,0,0,0,0.2,0,0,0,0,0,0],
    [0.14,0,0,0,0,0.06,0,0,0,0,0,0.11,0,0.01,0,0.1,0,0.21,0.05,0.1,0,0,0,0.2,0,0,0,0,0,0],
    [0.14,0,0,0,0,0.06,0,0,0,0,0,0.11,0,0.01,0,0.1,0,0.21,0.05,0.1,0,0,0,0.2,0,0,0,0,0,0],
    [0.14,0,0,0,0,0.06,0,0,0,0,0,0.11,0,0.01,0,0.1,0,0.21,0.05,0.1,0,0,0,0.2,0,0,0,0,0,0],
    [0.09,0,0,0,0,0.03,0,0,0,0,0,0.15,0,0.01,0.01,0.06,0,0.29,0.03,0.15,0,0,0,0.17,0,0,0.01,0,0,0],
    [0.09,0,0,0,0,0.14,0,0,0,0,0,0.09,0,0.04,0.02,0.07,0,0.3,0.02,0.02,0,0,0,0.21,0,0,0.02,0,0,0],
    [0.09,0,0,0,0,0.14,0,0,0,0,0,0.09,0,0.04,0.02,0.07,0,0.3,0.02,0.02,0,0,0,0.21,0,0,0.02,0,0,0],
    [0.09,0,0,0,0,0.14,0,0,0,0,0,0.09,0,0.04,0.02,0.07,0,0.3,0.02,0.02,0,0,0,0.21,0,0,0.02,0,0,0],
    [0.12,0,0,0,0,0.07,0,0,0,0,0,0.14,0,0.03,0.01,0.12,0,0.19,0.07,0.07,0,0,0,0.19,0,0,0.01,0,0,0],
    [0.12,0,0,0,0,0.07,0,0,0,0,0,0.14,0,0.03,0.01,0.12,0,0.19,0.07,0.07,0,0,0,0.19,0,0,0.01,0,0,0],
    [0.12,0,0,0,0,0.07,0,0,0,0,0,0.14,0,0.03,0.01,0.12,0,0.19,0.07,0.07,0,0,0,0.19,0,0,0.01,0,0,0],
    [0,0.03,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0.23,0.53,0.02,0,0,0,0,0.05,0.08,0,0,0,0,0],
    [0.04,0.04,0,0,0,0.04,0.04,0,0,0,0,0.04,0.04,0,0,0.04,0.44,0.04,0,0,0,0,0,0.12,0.04,0,0.04,0.04,0,0],
    [0.04,0.04,0,0,0,0.04,0.04,0,0,0,0,0.04,0.04,0,0,0.04,0.44,0.04,0,0,0,0,0,0.12,0.04,0,0.04,0.04,0,0],
    [0.01,0,0,0,0,0.01,0,0,0,0,0,0.01,0,0,0,0.01,0.75,0,0,0,0,0,0,0.2,0,0,0.01,0,0,0],
    [0.09,0,0.23,0.02,0.07,0,0,0,0.27,0,0,0.01,0,0,0,0.12,0,0,0,0,0.08,0,0,0,0,0,0.09,0,0.02,0],
    [0.09,0,0.23,0.02,0.07,0,0,0,0.27,0,0,0.01,0,0,0,0.12,0,0,0,0,0.08,0,0,0,0,0,0.09,0,0.02,0],
    [0.09,0,0.23,0.02,0.07,0,0,0,0.27,0,0,0.01,0,0,0,0.12,0,0,0,0,0.08,0,0,0,0,0,0.09,0,0.02,0],
    [0.09,0,0.23,0.02,0.07,0,0,0,0.27,0,0,0.01,0,0,0,0.12,0,0,0,0,0.08,0,0,0,0,0,0.09,0,0.02,0],
    [0.09,0,0.26,0.03,0.03,0,0,0,0.26,0,0,0.01,0,0,0,0.07,0,0,0,0,0.11,0,0,0,0,0,0.15,0,0.01,0.01],
    [0.05,0,0.31,0.01,0.09,0,0,0,0.21,0,0,0.01,0,0,0,0.09,0,0,0,0,0.03,0,0,0,0,0,0.13,0,0.01,0.01],
    [0.05,0,0.31,0.01,0.09,0,0,0,0.21,0,0,0.01,0,0,0,0.09,0,0,0,0,0.03,0,0,0,0,0,0.13,0,0.01,0.01],
    [0.05,0,0.31,0.01,0.09,0,0,0,0.21,0,0,0.01,0,0,0,0.09,0,0,0,0,0.03,0,0,0,0,0,0.13,0,0.01,0.01],
    [0.06,0,0.31,0.04,0.08,0,0,0,0.20,0,0,0.01,0,0,0,0.12,0,0,0,0,0.10,0,0,0,0,0,0.06,0,0.03,0.01],
    [0.06,0,0.31,0.04,0.08,0,0,0,0.20,0,0,0.01,0,0,0,0.12,0,0,0,0,0.10,0,0,0,0,0,0.06,0,0.03,0.01],
    [0.06,0,0.31,0.04,0.08,0,0,0,0.20,0,0,0.01,0,0,0,0.12,0,0,0,0,0.10,0,0,0,0,0,0.06,0,0.03,0.01],
    [0,0.15,0.51,0,0,0,0,0,0.06,0.13,0,0,0,0,0,0,0.04,0,0,0,0,0.02,0,0,0,0,0.02,0,0,0],
    [0.04,0.41,0.04,0,0,0,0,0,0.11,0.04,0,0.04,0.04,0,0,0.11,0.04,0,0,0,0.04,0.04,0,0,0,0,0.04,0.04,0,0],
    [0.04,0.41,0.04,0,0,0,0,0,0.11,0.04,0,0.04,0.04,0,0,0.11,0.04,0,0,0,0.04,0.04,0,0,0,0,0.04,0.04,0,0],
    [0.01,0.75,0,0,0,0,0,0,0.2,0,0,0.01,0,0,0,0.01,0,0,0,0,0.01,0,0,0,0,0,0.01,0,0,0]])

points = np.array([
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,0,0,2,3,0,0,0,0,0,0,0,0,0,0,0],
    [0,1,2,0,0,0,1,2,0,0,0,0,1,2,0,0,1,2,3,0,0,0,0,0,1,2,0,1,2,0],
    [0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,1,0,0,1,0,0],
    [0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,2,0,0,0,0,0,0,1,0,0,1,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,0,2,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3],
    [0,1,2,3,0,0,0,0,0,1,2,0,1,2,0,0,1,2,0,0,0,1,2,0,0,0,0,1,2,0],
    [0,1,2,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0],
    [0,1,2,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0],
    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]])

states = [
        "Ai0","Ai1","Ai2","Ai3","As","Ao0","Ao1","Ao2","Ad0","Ad1","Ad2","Af0","Af1","Af2","Af3",
        "Bi0","Bi1","Bi2","Bi3","Bs","Bo0","Bo1","Bo2","Bd0","Bd1","Bd2","Bf0","Bf1","Bf2","Bf3"
        ]
    
def simulate(t,
             transitions_4q=0,
             home_possession=None, away_possession=None,
             result=[],
             overtime = 0):
    """ Markov NBA Game Simulation """
    if (random.random() >= 0.5):
        if (home_possession is None):
            home_possession = 1
            away_possession = 0
        else: pass
        previous_state = 0
        possession = 0
        previous_possession = possession
    else:
        if (home_possession is None):
            home_possession = 0
            away_possession = 1
        else: pass
        previous_state = 15
        possession = 1
        previous_possession = possession
    if not result:
        result = [0,0]
        deviation = random.randint(-5,5)/100
        transitions = t+int(t*deviation)
    else:
        deviation = random.randint(-5,5)/100
        transitions = t+int(t*deviation)
    for i in range(1, transitions):
        probs = model[previous_state]
        probs /= probs.sum().astype(float)# normalization if != 1
        next_state = int(np.random.choice(30, 1, p=np.ravel(probs)))
        if (next_state >= 15):
            result[possession] += points[previous_state][next_state]
            possession = 1
            if (possession != previous_possession):
                home_possession += 1
                previous_possession = possession
        else:
            result[possession] += points[previous_state][next_state]
            possession = 0
            if (possession != previous_possession):
                away_possession += 1
                previous_possession = possession
        previous_state = next_state
    if (result[1] != result[0]):
        print('''Transitions: {}\nPossessions: {}\nPace: {}\nAway: {}\nHome: {}'''.format(
              transitions+transitions_4q,home_possession+away_possession,
              48*(home_possession+away_possession)/(2*48),result[1],result[0]))
    else:
        print("DOGRYWKA")
        overtime += 1
        print('''Transitions: {}\nPossessions: {}\nPace: {}\nAway: {}\nHome: {}'''.format(
              transitions+transitions_4q,home_possession+away_possession,
              48*(home_possession+away_possession)/(2*48),result[1],result[0]))
        simulate(28, transitions, home_possession, away_possession, result, overtime)
    return transitions+transitions_4q, home_possession+away_possession, 48*(home_possession+away_possession)/(2*48), result[1], result[0], overtime

if __name__ == "__main__":
    transitions = []
    possessions = []
    pace = []
    away = []
    home = []
    overtime = []
    away_win = 0
    home_win = 0
    for i in range(0,1230):
        a, b, c, d, e, f = simulate(270)
        if d < e: home_win += 1
        else: away_win +=1
        transitions.append(a)
        possessions.append(b)
        pace.append(c)
        away.append(d)
        home.append(e)
        overtime.append(f)
    print('''Transitions: {}\nPossessions: {}\nPace: {}\nPPG: {}\nOT: {}\nAway wins: {}\nHome wins: {}'''.format(
              np.mean(transitions),
              np.mean(possessions),
              np.mean(pace),
              (np.mean(away)+np.mean(home))/2,
              np.mean(overtime),
              away_win/1230,
              home_win/1230
              ))
